#!/usr/bin/env ruby

require "optparse"
require "nokogiri"
require "open-uri"
require "fileutils"
require "test/unit"
require "stringio"

class AtCoderCLI
  include Test::Unit::Assertions

  def exec(args)
    parse_args(args)
    send(@option[:cmd])
  end

  private

  PRJ_ROOT = File.expand_path("../..", __FILE__).freeze
  TEMPLATE_DIR = File.join(PRJ_ROOT, "template")
  SUB_COMMANDS = %w(init copy run fetch_testcases run_test).freeze
  LANG_CONF = {
    ruby: { exec: "ruby", ext: "rb" },
    go: { exec: "go run", ext: "go" },
  }

  def parse_args(args)
    @option = { src_dir: "src", lang: :ruby }
    opt = OptionParser.new
    opt.banner = "Usage: #{__FILE__} <command (#{SUB_COMMANDS.join("|")})> [args] [options]"
    opt.on("-c", "--contest CONTEST") {|v| @option[:contest] = v }
    opt.on("-t", "--tasks TASKS") {|v| @option[:tasks] = v.split(",").map(&:downcase) }
    opt.on("-i", "--input PATH") {|v| @option[:input_path] = v }
    opt.on("-s", "--src-dir DIR") {|v| @option[:src_dir] = v }
    opt.on("-l", "--language LANG") {|v| @option[:lang] = v.to_sym }
    opt.parse!(args)
    @option[:cmd] = args.shift
    abort(opt.help) if %i(cmd contest).any?{|k| !@option[k] } || !SUB_COMMANDS.include?(@option[:cmd])
  end

  def init
    FileUtils.mkdir_p(src_dir)
    template = File.join(TEMPLATE_DIR, "template.#{ext}")
    target_tasks.each do |l|
      FileUtils.cp(template, File.join(src_dir, "#{l}.#{ext}"))
    end
  end

  def run
    abort("input file is required") unless @option[:input_path]
    cmd = exec_task_command(target_tasks.first, @option[:input_path])
    system("time #{cmd}")
  end

  def copy
    `cat #{src_file(target_tasks.first)} | pbcopy`
  end

  def fetch_testcases
    FileUtils.mkdir_p(testcase_dir)
    task_info.each do |t|
      d = Nokogiri::HTML(open_atcoder(t[:uri]))
      d.xpath("//h3").each do |node|
        case node.text
        when /入力例 (\d+)/
          save_testcase(t[:task], $1, :in, node.next.text)
        when /出力例 (\d+)/
          save_testcase(t[:task], $1, :out, node.next.text)
        end
      end
    end
  end

  def test_cases
    tc = {}
    target_tasks.each do |t|
      Dir.glob(File.join(testcase_dir, "#{t}_*_in.txt")). each do |f|
        tc[t] ||= []
        tc[t] << [f, f.sub("_in", "_out")]
      end
    end
    tc
  end

  def run_test
    cnt_test = 0
    cnt_success = 0
    err_buf = StringIO.new
    test_cases.each do |t, tc|
      tc.sort.each do |in_path, out_path|
        cnt_test += 1
        cmd = exec_task_command(t, in_path)
        actual = `#{cmd}`
        expect = File.read(out_path)
        assert_equal(expect, actual)
        cnt_success += 1
        print "."
      rescue Test::Unit::AssertionFailedError => e
        err_buf.puts "-" * 10 + "\ninput=#{in_path}"
        err_buf.puts e.message
        print "F"
      end
    end
    STDERR.puts err_buf.string unless err_buf.string.empty?
    result = cnt_success == cnt_test ? "ALL OK!!!" : "Failed"
    puts "\n#{result} (#{cnt_success}/#{cnt_test})"
  end

  def save_testcase(task, no, type, text)
    path = File.join(testcase_dir, "#{task}_#{no}_#{type}.txt")
    File.open(path, "w") {|f| f.print text.gsub("\r\n", "\n") }
  end

  def task_info
    doc = Nokogiri::HTML(open_atcoder(tasks_uri))
    doc.xpath("//table//a").map do |node|
      u = node.attr("href")
      t = File.basename(u).split("_").last.downcase
      { task: t, uri: relative_uri(u) }
    end.uniq
  end

  def target_tasks
    @option[:tasks] || []
  end

  ATCODER_URI = "https://atcoder.jp".freeze

  def tasks_uri
    File.join(ATCODER_URI, "/contests/#{@option[:contest]}/tasks")
  end

  def relative_uri(path)
    File.join(ATCODER_URI, path)
  end

  def src_dir
    File.join(@option[:src_dir], @option[:contest])
  end

  def src_file(task)
    File.join(src_dir, "#{task}.#{ext}")
  end

  def testcase_dir
    File.join(src_dir, "test")
  end

  def ext
    lang[:ext]
  end

  def lang
    LANG_CONF[@option[:lang]]
  end

  def exec_task_command(task, input)
    %(#{lang[:exec]} #{src_file(task)} < #{input})
  end

  def open_atcoder(uri)
    open(uri + "?lang=ja")
  end
end

AtCoderCLI.new.exec(ARGV) if $PROGRAM_NAME == __FILE__
